{"is_source_file": true, "format": "TypeScript (Angular component)", "description": "This file defines an Angular standalone component 'NotesPage' responsible for displaying and managing notes. It includes logic for loading notes, searching, categorizing, editing, saving, deleting, and pinning notes, utilizing various Angular features like signals, dependency injection, and component composition.", "external_files": ["../layout/topbar/topbar.component", "../layout/sidebar/sidebar.component", "./note-card/note-card.component", "./note-editor/note-editor.component", "../core/services/notes.service", "../core/models/note.model", "./notes.page.html", "./notes.page.css"], "external_methods": ["inject(NotesService)", "this.notesService.list()", "this.notesService.update()", "this.notesService.create()", "this.notesService.remove()", "this.notesService.togglePin()"], "published": ["NotesPage"], "classes": [{"name": "NotesPage", "description": "Angular component managing the notes interface with functionalities such as search, categorize, edit, delete, and pin notes."}], "methods": [{"name": "ngOnInit", "description": "Initializes the component and loads notes when the component is created."}, {"name": "load", "description": "Fetches the list of notes from NotesService based on current search query and category."}, {"name": "onSearch", "description": "Handles search input, updates the searchQuery signal, and reloads notes."}, {"name": "onSelectCategory", "description": "Sets selected category and reloads notes."}, {"name": "openEditor", "description": "Opens the note editor with an existing note or a new empty note."}, {"name": "saveEditor", "description": "Saves the note being edited, either creating or updating it, then reloads the notes list."}, {"name": "remove", "description": "Deletes a note after user confirmation and reloads the list."}, {"name": "togglePin", "description": "Toggles the pinned status of a note and refreshes the list."}], "calls": ["this.notesService.list", "this.notesService.update", "this.notesService.create", "this.notesService.remove", "this.notesService.togglePin", "g.confirm"], "search-terms": ["NotesPage", "Angular component", "note management", "loading notes", "search", "category", "edit note", "delete note", "pin note", "signal", "subscribe"], "state": 2, "file_id": 40, "knowledge_revision": 105, "git_revision": "", "revision_history": [{"82": ""}, {"99": ""}, {"103": ""}, {"105": ""}], "ctags": [{"_type": "tag", "name": "NotesPage", "path": "/home/kavia/workspace/code-generation/secure-notes-organizer-22453-22462/note_taking_frontend/src/app/notes/notes.page.ts", "pattern": "/^export class NotesPage {$/", "language": "TypeScript", "kind": "class"}, {"_type": "tag", "name": "g", "path": "/home/kavia/workspace/code-generation/secure-notes-organizer-22453-22462/note_taking_frontend/src/app/notes/notes.page.ts", "pattern": "/^    const g: any = (typeof globalThis !== 'undefined') ? (globalThis as any) : undefined;$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "isUpdate", "path": "/home/kavia/workspace/code-generation/secure-notes-organizer-22453-22462/note_taking_frontend/src/app/notes/notes.page.ts", "pattern": "/^    const isUpdate = !!payload.id;$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "notesService", "path": "/home/kavia/workspace/code-generation/secure-notes-organizer-22453-22462/note_taking_frontend/src/app/notes/notes.page.ts", "pattern": "/^  private readonly notesService = inject(NotesService);$/", "language": "TypeScript", "kind": "property", "scope": "NotesPage", "scopeKind": "class"}, {"_type": "tag", "name": "proceed", "path": "/home/kavia/workspace/code-generation/secure-notes-organizer-22453-22462/note_taking_frontend/src/app/notes/notes.page.ts", "pattern": "/^    let proceed = true;$/", "language": "TypeScript", "kind": "variable"}, {"_type": "tag", "name": "req", "path": "/home/kavia/workspace/code-generation/secure-notes-organizer-22453-22462/note_taking_frontend/src/app/notes/notes.page.ts", "pattern": "/^    const req = isUpdate ? this.notesService.update(payload.id as string, payload) : this.notesS/", "language": "TypeScript", "kind": "constant"}], "hash": "2ea57625141594671ab3169eee362b12", "format-version": 4, "code-base-name": "note_taking_frontend", "filename": "note_taking_frontend/src/app/notes/notes.page.ts", "fields": [{"name": "private readonly notesService = inject(NotesService);", "scope": "NotesPage", "scopeKind": "class", "description": "unavailable"}, {"name": "let proceed = true;", "scope": "", "scopeKind": "", "description": "unavailable"}]}